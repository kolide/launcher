// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	keys "github.com/kolide/launcher/pkg/agent/flags/keys"
	mock "github.com/stretchr/testify/mock"
	bbolt "go.etcd.io/bbolt"

	time "time"

	types "github.com/kolide/launcher/pkg/agent/types"
)

// Knapsack is an autogenerated mock type for the Knapsack type
type Knapsack struct {
	mock.Mock
}

// AgentFlagsStore provides a mock function with given fields:
func (_m *Knapsack) AgentFlagsStore() types.GetterSetterDeleterIteratorUpdater {
	ret := _m.Called()

	var r0 types.GetterSetterDeleterIteratorUpdater
	if rf, ok := ret.Get(0).(func() types.GetterSetterDeleterIteratorUpdater); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.GetterSetterDeleterIteratorUpdater)
		}
	}

	return r0
}

// AutoupdateErrorsStore provides a mock function with given fields:
func (_m *Knapsack) AutoupdateErrorsStore() types.GetterSetterDeleterIteratorUpdater {
	ret := _m.Called()

	var r0 types.GetterSetterDeleterIteratorUpdater
	if rf, ok := ret.Get(0).(func() types.GetterSetterDeleterIteratorUpdater); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.GetterSetterDeleterIteratorUpdater)
		}
	}

	return r0
}

// BboltDB provides a mock function with given fields:
func (_m *Knapsack) BboltDB() *bbolt.DB {
	ret := _m.Called()

	var r0 *bbolt.DB
	if rf, ok := ret.Get(0).(func() *bbolt.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bbolt.DB)
		}
	}

	return r0
}

// ConfigStore provides a mock function with given fields:
func (_m *Knapsack) ConfigStore() types.GetterSetterDeleterIteratorUpdater {
	ret := _m.Called()

	var r0 types.GetterSetterDeleterIteratorUpdater
	if rf, ok := ret.Get(0).(func() types.GetterSetterDeleterIteratorUpdater); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.GetterSetterDeleterIteratorUpdater)
		}
	}

	return r0
}

// ControlRequestInterval provides a mock function with given fields:
func (_m *Knapsack) ControlRequestInterval() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// ControlServerURL provides a mock function with given fields:
func (_m *Knapsack) ControlServerURL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ControlStore provides a mock function with given fields:
func (_m *Knapsack) ControlStore() types.GetterSetterDeleterIteratorUpdater {
	ret := _m.Called()

	var r0 types.GetterSetterDeleterIteratorUpdater
	if rf, ok := ret.Get(0).(func() types.GetterSetterDeleterIteratorUpdater); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.GetterSetterDeleterIteratorUpdater)
		}
	}

	return r0
}

// DebugServerData provides a mock function with given fields:
func (_m *Knapsack) DebugServerData() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DesktopEnabled provides a mock function with given fields:
func (_m *Knapsack) DesktopEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DisableControlTLS provides a mock function with given fields:
func (_m *Knapsack) DisableControlTLS() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ForceControlSubsystems provides a mock function with given fields:
func (_m *Knapsack) ForceControlSubsystems() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// InitialResultsStore provides a mock function with given fields:
func (_m *Knapsack) InitialResultsStore() types.GetterSetterDeleterIteratorUpdater {
	ret := _m.Called()

	var r0 types.GetterSetterDeleterIteratorUpdater
	if rf, ok := ret.Get(0).(func() types.GetterSetterDeleterIteratorUpdater); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.GetterSetterDeleterIteratorUpdater)
		}
	}

	return r0
}

// InsecureControlTLS provides a mock function with given fields:
func (_m *Knapsack) InsecureControlTLS() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OsqueryHistoryInstanceStore provides a mock function with given fields:
func (_m *Knapsack) OsqueryHistoryInstanceStore() types.GetterSetterDeleterIteratorUpdater {
	ret := _m.Called()

	var r0 types.GetterSetterDeleterIteratorUpdater
	if rf, ok := ret.Get(0).(func() types.GetterSetterDeleterIteratorUpdater); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.GetterSetterDeleterIteratorUpdater)
		}
	}

	return r0
}

// RegisterChangeObserver provides a mock function with given fields: observer, flagKeys
func (_m *Knapsack) RegisterChangeObserver(observer types.FlagsChangeObserver, flagKeys ...keys.FlagKey) {
	_va := make([]interface{}, len(flagKeys))
	for _i := range flagKeys {
		_va[_i] = flagKeys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, observer)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ResultLogsStore provides a mock function with given fields:
func (_m *Knapsack) ResultLogsStore() types.GetterSetterDeleterIteratorUpdater {
	ret := _m.Called()

	var r0 types.GetterSetterDeleterIteratorUpdater
	if rf, ok := ret.Get(0).(func() types.GetterSetterDeleterIteratorUpdater); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.GetterSetterDeleterIteratorUpdater)
		}
	}

	return r0
}

// SentNotificationsStore provides a mock function with given fields:
func (_m *Knapsack) SentNotificationsStore() types.GetterSetterDeleterIteratorUpdater {
	ret := _m.Called()

	var r0 types.GetterSetterDeleterIteratorUpdater
	if rf, ok := ret.Get(0).(func() types.GetterSetterDeleterIteratorUpdater); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.GetterSetterDeleterIteratorUpdater)
		}
	}

	return r0
}

// ServerProvidedDataStore provides a mock function with given fields:
func (_m *Knapsack) ServerProvidedDataStore() types.GetterSetterDeleterIteratorUpdater {
	ret := _m.Called()

	var r0 types.GetterSetterDeleterIteratorUpdater
	if rf, ok := ret.Get(0).(func() types.GetterSetterDeleterIteratorUpdater); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.GetterSetterDeleterIteratorUpdater)
		}
	}

	return r0
}

// SetControlRequestInterval provides a mock function with given fields: interval
func (_m *Knapsack) SetControlRequestInterval(interval time.Duration) error {
	ret := _m.Called(interval)

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Duration) error); ok {
		r0 = rf(interval)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetControlRequestIntervalOverride provides a mock function with given fields: interval, duration
func (_m *Knapsack) SetControlRequestIntervalOverride(interval time.Duration, duration time.Duration) {
	_m.Called(interval, duration)
}

// SetControlServerURL provides a mock function with given fields: url
func (_m *Knapsack) SetControlServerURL(url string) error {
	ret := _m.Called(url)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDebugServerData provides a mock function with given fields: debug
func (_m *Knapsack) SetDebugServerData(debug bool) error {
	ret := _m.Called(debug)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(debug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDesktopEnabled provides a mock function with given fields: enabled
func (_m *Knapsack) SetDesktopEnabled(enabled bool) error {
	ret := _m.Called(enabled)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(enabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDisableControlTLS provides a mock function with given fields: disabled
func (_m *Knapsack) SetDisableControlTLS(disabled bool) error {
	ret := _m.Called(disabled)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(disabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetForceControlSubsystems provides a mock function with given fields: force
func (_m *Knapsack) SetForceControlSubsystems(force bool) error {
	ret := _m.Called(force)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetInsecureControlTLS provides a mock function with given fields: disabled
func (_m *Knapsack) SetInsecureControlTLS(disabled bool) error {
	ret := _m.Called(disabled)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(disabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StatusLogsStore provides a mock function with given fields:
func (_m *Knapsack) StatusLogsStore() types.GetterSetterDeleterIteratorUpdater {
	ret := _m.Called()

	var r0 types.GetterSetterDeleterIteratorUpdater
	if rf, ok := ret.Get(0).(func() types.GetterSetterDeleterIteratorUpdater); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.GetterSetterDeleterIteratorUpdater)
		}
	}

	return r0
}

type mockConstructorTestingTNewKnapsack interface {
	mock.TestingT
	Cleanup(func())
}

// NewKnapsack creates a new instance of Knapsack. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKnapsack(t mockConstructorTestingTNewKnapsack) *Knapsack {
	mock := &Knapsack{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
