// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// GetterSetterDeleterIteratorUpdater is an autogenerated mock type for the GetterSetterDeleterIteratorUpdater type
type GetterSetterDeleterIteratorUpdater struct {
	mock.Mock
}

// Delete provides a mock function with given fields: keys
func (_m *GetterSetterDeleterIteratorUpdater) Delete(keys ...[]byte) error {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...[]byte) error); ok {
		r0 = rf(keys...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForEach provides a mock function with given fields: fn
func (_m *GetterSetterDeleterIteratorUpdater) ForEach(fn func([]byte, []byte) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func([]byte, []byte) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key
func (_m *GetterSetterDeleterIteratorUpdater) Get(key []byte) ([]byte, error) {
	ret := _m.Called(key)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: key, value
func (_m *GetterSetterDeleterIteratorUpdater) Set(key []byte, value []byte) error {
	ret := _m.Called(key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: kvPairs
func (_m *GetterSetterDeleterIteratorUpdater) Update(kvPairs map[string]string) ([]string, error) {
	ret := _m.Called(kvPairs)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]string) ([]string, error)); ok {
		return rf(kvPairs)
	}
	if rf, ok := ret.Get(0).(func(map[string]string) []string); ok {
		r0 = rf(kvPairs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]string) error); ok {
		r1 = rf(kvPairs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGetterSetterDeleterIteratorUpdater interface {
	mock.TestingT
	Cleanup(func())
}

// NewGetterSetterDeleterIteratorUpdater creates a new instance of GetterSetterDeleterIteratorUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGetterSetterDeleterIteratorUpdater(t mockConstructorTestingTNewGetterSetterDeleterIteratorUpdater) *GetterSetterDeleterIteratorUpdater {
	mock := &GetterSetterDeleterIteratorUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
