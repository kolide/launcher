// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	checkups "github.com/kolide/launcher/pkg/debug/checkups"

	io "io"

	mock "github.com/stretchr/testify/mock"

	types "github.com/kolide/launcher/pkg/agent/types"
)

// Flarer is an autogenerated mock type for the flarer type
type Flarer struct {
	mock.Mock
}

// RunFlare provides a mock function with given fields: ctx, k, flareStream, runtimeEnvironment
func (_m *Flarer) RunFlare(ctx context.Context, k types.Knapsack, flareStream io.Writer, runtimeEnvironment checkups.RuntimeEnvironmentType) error {
	ret := _m.Called(ctx, k, flareStream, runtimeEnvironment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Knapsack, io.Writer, checkups.RuntimeEnvironmentType) error); ok {
		r0 = rf(ctx, k, flareStream, runtimeEnvironment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFlarer creates a new instance of Flarer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlarer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Flarer {
	mock := &Flarer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
