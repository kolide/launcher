// Code generated by mockery v2.21.1. DO NOT EDIT.

package tuf

import mock "github.com/stretchr/testify/mock"

// MockreadOnlyUpdateLibrary is an autogenerated mock type for the readOnlyUpdateLibrary type
type MockreadOnlyUpdateLibrary struct {
	mock.Mock
}

// Available provides a mock function with given fields: binary, targetFilename
func (_m *MockreadOnlyUpdateLibrary) Available(binary autoupdatableBinary, targetFilename string) bool {
	ret := _m.Called(binary, targetFilename)

	var r0 bool
	if rf, ok := ret.Get(0).(func(autoupdatableBinary, string) bool); ok {
		r0 = rf(binary, targetFilename)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsInstallVersion provides a mock function with given fields: binary, targetFilename
func (_m *MockreadOnlyUpdateLibrary) IsInstallVersion(binary autoupdatableBinary, targetFilename string) bool {
	ret := _m.Called(binary, targetFilename)

	var r0 bool
	if rf, ok := ret.Get(0).(func(autoupdatableBinary, string) bool); ok {
		r0 = rf(binary, targetFilename)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MostRecentVersion provides a mock function with given fields: binary
func (_m *MockreadOnlyUpdateLibrary) MostRecentVersion(binary autoupdatableBinary) (string, error) {
	ret := _m.Called(binary)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(autoupdatableBinary) (string, error)); ok {
		return rf(binary)
	}
	if rf, ok := ret.Get(0).(func(autoupdatableBinary) string); ok {
		r0 = rf(binary)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(autoupdatableBinary) error); ok {
		r1 = rf(binary)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PathToTargetVersionExecutable provides a mock function with given fields: binary, targetFilename
func (_m *MockreadOnlyUpdateLibrary) PathToTargetVersionExecutable(binary autoupdatableBinary, targetFilename string) string {
	ret := _m.Called(binary, targetFilename)

	var r0 string
	if rf, ok := ret.Get(0).(func(autoupdatableBinary, string) string); ok {
		r0 = rf(binary, targetFilename)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewMockreadOnlyUpdateLibrary interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockreadOnlyUpdateLibrary creates a new instance of MockreadOnlyUpdateLibrary. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockreadOnlyUpdateLibrary(t mockConstructorTestingTNewMockreadOnlyUpdateLibrary) *MockreadOnlyUpdateLibrary {
	mock := &MockreadOnlyUpdateLibrary{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
