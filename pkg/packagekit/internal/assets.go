// Code generated by go-bindata.
// sources:
// assets/installer.wxs
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsInstallerWxs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x61\x8f\xda\x38\x10\xfd\x9c\xfc\x8a\xa9\x75\x12\xd7\x4a\x24\xec\xed\x69\x55\xad\x08\x08\xc1\xb2\x17\x15\xda\x15\xd0\xd2\x93\xfa\xc5\xd8\x93\xc4\xd7\xc4\x8e\x6c\xb3\x80\xaa\xfc\xf7\x53\x9c\x04\xd8\x95\x4e\xda\xe3\x13\x33\x9a\x99\xbc\x37\xef\x8d\x87\xe3\x63\x91\xc3\x33\x6a\x23\x94\x8c\xc8\x4d\x30\x20\x80\x92\x29\x2e\x64\x1a\x91\xaf\x9b\x79\xff\x23\x19\x8f\xfc\xe1\x56\x1c\xe1\x58\xe4\xd2\x44\x24\xb3\xb6\xbc\x0f\x43\xc3\x32\x2c\xa8\x09\x0a\xc1\xb4\x32\x2a\xb1\x01\x53\x45\x78\x10\xc7\xf0\x8f\xc1\xe0\x2e\x3c\x08\x32\xf2\x01\x86\xef\xfa\x7d\x1f\xdc\x6f\x1e\x7f\x5f\x3e\xc0\xf4\xcb\xd3\xdf\xab\xf8\xf1\xaf\x8d\x0f\xd0\xef\x8f\xfc\xba\x66\x2c\x12\xf8\xed\xf7\x67\xaa\x83\x89\x66\xd9\x7b\x88\xe0\xf6\xe3\x1d\x8c\x5d\xff\x98\x63\x22\x24\xc2\x93\x56\xe9\x5c\xe5\x1c\x75\x54\xff\xd5\xb4\x98\x8b\x1c\x4d\x93\xea\x6a\x31\x37\xf8\xa6\xb6\xbb\x3f\x5f\x35\x4a\x2e\x92\x71\x83\xe6\x49\x2b\xbe\x67\xb6\x45\x1d\xf3\x88\x7c\x20\x6d\xf0\x99\x16\x18\x91\x4f\x2a\x17\x1c\xe1\xd7\xaf\xe0\x4b\x69\x4d\x50\x27\xab\xea\x1c\xc6\x1c\xa5\x15\x89\x40\x5d\x55\x2f\x58\x75\x05\xdf\x9a\x65\x57\x55\x37\x75\x41\x65\xba\xa7\x29\x46\xe4\x66\x70\x7b\xdb\x65\xbf\x75\x9a\xfc\x67\xdf\x92\xca\x7d\x42\x99\xdd\x6b\xd4\x8d\x2c\xe6\x3e\x0c\x7f\x3a\x74\xb5\x18\x5d\xdd\xd7\x32\xd5\x94\xe3\x54\x71\x74\xd3\xae\xe2\xaa\x22\xe0\x58\xd7\xbc\x29\xfb\x49\x53\xf4\xbd\x98\x47\xbd\x0f\x3d\xdf\xfb\x84\xa7\x83\xd2\xdc\x44\xbd\x58\x1a\x4b\xf3\x1c\x75\xcf\xf7\x66\x68\x98\x16\xa5\x75\xd8\xde\xbe\x0a\xe2\x7b\x53\x55\x14\x28\xad\xf9\x9f\x6d\xe7\x8f\x9f\x37\x72\x3b\x18\x34\xe3\x4a\x8d\xc6\x20\x8f\xc8\x09\xcd\xa5\x72\xcd\x54\x89\x11\x29\x51\x2f\x29\xcb\x84\x44\xe2\x7b\xdd\x8e\x4d\xbb\x64\x08\x3b\xda\xef\xfa\x7d\xd8\x64\xc2\x40\xa6\x72\x6e\xc0\x66\x08\x49\x6d\x11\x48\x51\xa2\xa6\x16\x39\xec\x4e\x90\x21\xb5\xce\xaf\xae\x67\x89\x5c\xd0\xda\x1a\xbd\x9b\x1e\x4c\xe9\x4e\x48\xb4\x11\x49\x55\xc0\xe8\x8e\xc0\x43\xb1\x43\x3e\xa5\xbb\x06\x16\x74\x38\x85\x92\x0b\x7c\xc6\x3c\x22\x99\x48\xb3\x2b\x04\x4b\xfa\x8f\xd2\xad\x28\x30\xc9\x73\x75\x98\xa9\x83\x74\xa1\x69\x67\xbc\x40\xbb\x46\x0b\xf1\xe7\xf5\x66\xb2\x58\xcc\xe2\x15\x58\x05\x84\xdd\xff\x68\xed\x0d\xce\xdf\x3f\x9a\x0d\x93\x00\xb6\xc2\x66\x40\xcb\x52\xab\x52\x0b\x6a\xd1\xf7\x60\x2b\xbe\x83\xc6\x32\xa7\x0c\x9d\x1e\x40\x73\x25\x53\xc7\xfc\x40\x4f\x17\x96\x33\xa1\x91\x59\xa5\x4f\xee\x08\x36\x93\xd5\xe3\xc3\x66\x16\xaf\x48\x7b\x06\x6b\xb5\xd7\x0c\x67\x42\x93\x51\x6b\xb4\x57\x1d\x8d\xf9\x2f\x17\xf8\x9e\x8c\x7c\xef\x55\xcd\x85\x07\x79\x71\x5d\x24\x3c\x0f\x0d\xcf\x1d\x2d\xae\xeb\xc4\x65\x2b\xad\xf8\x57\x02\x9e\x89\xcc\x91\xd6\x47\xe2\x9c\x4d\x16\x74\x2f\x59\x86\xda\xed\x89\xf8\xde\x46\xd8\x1c\x2f\xe9\xda\x2b\x8d\x4a\x37\x17\x5e\xb5\x84\x4a\xa2\xb4\x8f\x5a\xed\xcb\x15\x26\x0e\xfb\xa4\x2c\x9b\x21\x10\x76\xc8\xda\x2f\x35\x0f\x49\xd8\xbe\x24\x23\x7f\x18\x6e\xc5\x71\xe4\xff\x1b\x00\x00\xff\xff\x77\x11\x40\xda\x6d\x05\x00\x00")

func assetsInstallerWxsBytes() ([]byte, error) {
	return bindataRead(
		_assetsInstallerWxs,
		"assets/installer.wxs",
	)
}

func assetsInstallerWxs() (*asset, error) {
	bytes, err := assetsInstallerWxsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/installer.wxs", size: 1389, mode: os.FileMode(420), modTime: time.Unix(1547089099, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/installer.wxs": assetsInstallerWxs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"installer.wxs": &bintree{assetsInstallerWxs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

