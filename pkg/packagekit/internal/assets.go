// Code generated by go-bindata.
// sources:
// internal/assets/installer.wxs
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalAssetsInstallerWxs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5d\x6f\xea\x46\x10\x7d\xb6\x7f\xc5\x74\x55\x89\xde\x2b\x61\x43\xa9\xa2\xab\x08\x1b\x21\xb8\x44\x28\x90\x46\x40\x42\x1f\xf2\xb2\xec\x8e\xed\x6d\xec\x5d\x6b\x77\x09\xa0\xc8\xff\xbd\xf2\x17\x90\x48\x95\x72\x79\x62\xc6\x33\xe3\x73\xce\x9c\xf1\x70\x74\xcc\x52\x78\x43\x6d\x84\x92\x01\xe9\x7b\x3d\x02\x28\x99\xe2\x42\xc6\x01\x79\xda\xcc\xba\x3f\xc8\x28\x74\x87\x5b\x71\x84\x63\x96\x4a\x13\x90\xc4\xda\xfc\xd6\xf7\x0d\x4b\x30\xa3\xc6\xcb\x04\xd3\xca\xa8\xc8\x7a\x4c\x65\xfe\x41\x1c\xfd\x3f\x7b\xbd\x1b\xff\x20\x48\xe8\x02\x0c\x47\x22\x82\xdf\xff\x78\xa3\xda\x1b\x6b\x96\x7c\x83\x00\x06\x3f\x6e\x60\x54\x3f\xe3\x18\x09\x89\xf0\xa8\x55\x3c\x53\x29\x47\x1d\x94\x7f\x35\xcd\x66\x22\x45\x53\xa7\xda\x5a\x4c\x0d\x7e\xa9\xed\xe6\xaf\x4f\x8d\x92\x8b\x68\x14\xba\x65\xf0\xa8\x15\xdf\x33\xeb\x42\xf5\x9b\xf3\x80\x7c\x27\x4d\xf0\x40\x33\x0c\xc8\xbd\x4a\x05\x47\x78\x7f\xf7\xfe\xce\xad\xf1\xca\x64\x51\x9c\xc3\x39\x47\x69\x45\x24\x50\x17\xc5\x07\x56\x6d\xc1\x73\x2d\x64\x51\xb4\x53\x17\x54\xc6\x7b\x1a\x63\x40\xfa\xbd\xc1\xa0\xcd\x3e\xb7\x7a\xff\x6f\xdf\x92\xca\x7d\x44\x99\xdd\x6b\xd4\xb5\xe4\xe6\xd6\xf7\x5f\x2b\x74\xa5\xd0\x6d\xdd\x53\x1e\x6b\xca\x71\xa2\x38\x56\xd3\xae\xe2\xa2\x20\x50\xb1\x2e\x79\x53\xf6\x4a\x63\x74\x9d\x39\x0f\x3a\xdf\x3b\xae\x73\x8f\xa7\x83\xd2\xdc\x04\x9d\xb9\x34\x96\xa6\x29\xea\x8e\xeb\x4c\xd1\x30\x2d\x72\x5b\x61\xfb\xba\x14\xc4\x75\x26\x2a\xcb\x50\x5a\xf3\x8b\x6d\xe7\x97\x9f\x15\x19\xf4\x7a\xf5\xb8\x5c\xa3\x31\xc8\x03\x72\x42\x73\xa9\x5c\x33\x95\x63\x40\x72\xd4\x4b\xca\x12\x21\x91\xb8\x4e\xab\xb1\x69\x44\x06\xbf\xa5\xfd\x5b\xb7\x0b\x9b\x44\x18\x48\x54\xca\x0d\xd8\x04\x21\x2a\x2d\x02\x31\x4a\xd4\xd4\x22\x87\xdd\x09\x12\xa4\x16\xba\xdd\xb0\xee\x59\x22\x17\xb4\xb4\x46\xa7\xdf\x81\x09\xdd\x09\x89\x36\x20\xb1\xf2\x18\xdd\x11\xf8\x99\xed\x90\x4f\xe8\xae\x86\x05\x2d\x4e\xa1\xe4\x02\xdf\x30\x0d\x48\x22\xe2\xe4\x0a\xc1\x92\xfe\xab\x74\xb3\x14\x18\xa7\xa9\x3a\x4c\xd5\x41\x56\xa1\x69\x66\x7c\x40\xbb\x46\x0b\xf3\x87\xf5\x66\xbc\x58\x4c\xe7\x2b\xb0\x0a\x08\xbb\x7d\x69\xec\x0d\x95\xbf\x5f\x6a\x85\x89\x07\x5b\x61\x13\xa0\x79\xae\x55\xae\x05\xb5\xe8\x3a\xb0\x15\xff\x80\xc6\x3c\xa5\x0c\xab\x7d\x00\x4d\x95\x8c\x2b\xe6\x07\x7a\xba\xb0\x9c\x0a\x8d\xcc\x2a\x7d\xaa\x8e\x60\x33\x5e\xdd\xfd\xdc\x4c\xe7\x2b\xd2\x9c\xc1\x5a\xed\x35\xc3\xa9\xd0\x24\x6c\x8c\xf6\xa9\xa3\x36\xff\xe5\x02\xbf\x91\xd0\x75\x3e\xd5\x5c\x78\x90\x0f\xd7\x45\xfc\xf3\x50\xff\xdc\xd1\xe0\xba\x4e\x5c\x54\x69\x96\x7f\xb5\xc0\x33\x91\x19\xd2\xf2\x48\x2a\x67\x93\x05\xdd\x4b\x96\xa0\xae\x74\x22\xae\xb3\x11\x36\xc5\x4b\xba\xf4\x4a\xbd\xa5\xfe\x85\x57\xb9\x42\x25\x51\xda\x3b\xad\xf6\xf9\x0a\xa3\x0a\xfb\x38\xcf\xeb\x21\xe0\xb7\xc8\x9a\x37\xd5\x1f\x12\xbf\xf9\x92\x84\xee\xd0\xdf\x8a\x63\xe8\xfe\x17\x00\x00\xff\xff\x48\xce\x18\x03\x49\x05\x00\x00")

func internalAssetsInstallerWxsBytes() ([]byte, error) {
	return bindataRead(
		_internalAssetsInstallerWxs,
		"internal/assets/installer.wxs",
	)
}

func internalAssetsInstallerWxs() (*asset, error) {
	bytes, err := internalAssetsInstallerWxsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/assets/installer.wxs", size: 1353, mode: os.FileMode(420), modTime: time.Unix(1547089149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/assets/installer.wxs": internalAssetsInstallerWxs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"installer.wxs": &bintree{internalAssetsInstallerWxs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

