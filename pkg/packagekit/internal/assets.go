// Code generated by go-bindata. DO NOT EDIT.
// sources:
// internal/assets/init.sh
// internal/assets/main.wxs
package internal

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalAssetsInitSh = []byte(`#!/bin/sh

### BEGIN INIT INFO
# Provides:          {{.Common.Identifier}}
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO

set -e
NAME="{{.Common.Identifier}}"
DAEMON="{{.Common.Path}}"
DAEMON_OPTS="{{ StringsJoin .Common.Flags " \\\n" }}"

{{- range $key, $value := .Common.Environment }}
{{$key}}={{$value}}
export {{$key}}
{{- end }}

PATH="${PATH:+$PATH:}/usr/sbin:/sbin"
export PATH

is_running() {
    start-stop-daemon --status --exec $DAEMON
}
case "$1" in
  start)
        echo "Starting daemon: "$NAME
        start-stop-daemon --start --quiet --background --exec $DAEMON -- $DAEMON_OPTS
        ;;
  stop)
        echo "Stopping daemon: "$NAME
        start-stop-daemon --stop --quiet --oknodo --exec $DAEMON
        ;;
  restart)
        echo "Restarting daemon: "$NAME
        start-stop-daemon --stop --quiet --oknodo --retry 30 --exec $DAEMON
        start-stop-daemon --start --quiet --background --exec $DAEMON -- $DAEMON_OPTS
        ;;
  status)
    if is_running; then
        echo "Running"
    else
        echo "Stopped"
        exit 1
    fi
    ;;
  *)
        echo "Usage: "$1" {start|stop|restart|status}"
        exit 1
esac

exit 0
`)

func internalAssetsInitShBytes() ([]byte, error) {
	return _internalAssetsInitSh, nil
}

func internalAssetsInitSh() (*asset, error) {
	bytes, err := internalAssetsInitShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/assets/init.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalAssetsMainWxs = []byte(`<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi" xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">
<?if $(sys.BUILDARCH)="x86"?>
    <?define Program_Files="ProgramFilesFolder"?>
<?elseif $(sys.BUILDARCH)="x64"?>
    <?define Program_Files="ProgramFiles64Folder"?>
<?else?>
    <?error Unsupported value of sys.BUILDARCH=$(sys.BUILDARCH)?>
<?endif?>

  <Product
      Id="{{.ProductCode}}"
      Name="Kolide {{.Opts.Name}} {{.Opts.Identifier}} $(sys.BUILDARCH) {{.Opts.Version}}"
      Language="1033"
      Version="{{.Opts.Version}}"
      Manufacturer="https://kolide.com"
      UpgradeCode="{{.UpgradeCode}}" >

    <Package
	Id="*"
	Keywords='Installer'
	Description="Kolide {{.Opts.Name}} {{.Opts.Identifier}}"
	Comments="Kolide {{.Opts.Name}} {{.Opts.Identifier}}"
	InstallerVersion="300"
	Compressed="yes"
	InstallScope="perMachine"
	InstallPrivileges="elevated"
	Languages="1033" />

    <!-- This holds the files generated by heat -->
    <Media Id='1' Cabinet="go.cab" EmbedCab="yes" CompressionLevel="high" />

    <MajorUpgrade AllowDowngrades="yes" />

    <!-- Set INSTALLDIR to "c:\Program Files\Kolide". With appropriate
	 WiX replacements along the way
	 Set DATADIR to "c:\ProgramData\Kolide"

	 It's up to the caller to decide which directories to use
    -->
    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="$(var.Program_Files)">
	<Directory Id="PROGDIR" Name="Kolide"/>
      </Directory>
      <Directory Id="CommonAppDataFolder">
	<Directory Id="DATADIR" Name="Kolide"/>
      </Directory>
    </Directory>

    <!-- Install the files -->
    <Feature
	Id="LauncherFiles"
	Title="Launcher"
	Level="1">
      <ComponentGroupRef Id="AppFiles" />
    </Feature>

    <!--
    <UI>
      <Dialog Id="ExitDlg" Width="370" Height="270" Title="Kolide {{.Opts.Name}}">
      </Dialog>

    </UI>
-->

    <!-- Can we just include the existing ExitDialog? -->
    <!-- <DialogRef Id="ExitDialog" /> -->
    <!--
    <UI>
      <TextStyle Id="WixUI_Font_Normal" FaceName="Tahoma" Size="8" />
      <TextStyle Id="WixUI_Font_Bigger" FaceName="Tahoma" Size="12" />
      <TextStyle Id="WixUI_Font_Title" FaceName="Tahoma" Size="9" Bold="yes" />
      <Publish Dialog="ExitDialog" Control="Finish" Event="EndDialog" Value="Return" Order="999">1</Publish>
    </UI>
    -->

    <!--
    <UI>
      <TextStyle Id="WixUI_Font_Normal" FaceName="Tahoma" Size="8" />
      <TextStyle Id="WixUI_Font_Bigger" FaceName="Tahoma" Size="12" />
      <TextStyle Id="WixUI_Font_Title" FaceName="Tahoma" Size="9" Bold="yes" />

      <Dialog Id="ExitDialogK" Width="370" Height="270" Title="[ProductName] Setup">
	<Control Id="Finish" Type="PushButton" X="236" Y="243" Width="56" Height="17" Default="yes" Cancel="yes" Text="Finish)" />
	<Control Id="Cancel" Type="PushButton" X="304" Y="243" Width="56" Height="17" Disabled="yes" Text="Cancel" />
	<Control Id="Bitmap" Type="Bitmap" X="0" Y="0" Width="370" Height="234" TabSkip="no" Text="WixUI_Bmp_Dialog" />
	<Control Id="Back" Type="PushButton" X="180" Y="243" Width="56" Height="17" Disabled="yes" Text="Back" />
	<Control Id="BottomLine" Type="Line" X="0" Y="234" Width="370" Height="0" />
	<Control Id="Description" Type="Text" X="135" Y="70" Width="220" Height="40" Transparent="yes" NoPrefix="yes" Text="Click the Finish button to exit the Setup Wizard." />
	<Control Id="Title" Type="Text" X="135" Y="20" Width="220" Height="60" Transparent="yes" NoPrefix="yes" Text="{\WixUI_Font_Bigger} Completed the [ProductName] Setup Wizard" />
	<Control Id="OptionalText" Type="Text" X="135" Y="110" Width="220" Height="80" Transparent="yes" NoPrefix="yes" Hidden="yes" Text="[WIXUI_EXITDIALOGOPTIONALTEXT]">
	  <Condition Action="show">WIXUI_EXITDIALOGOPTIONALTEXT AND NOT Installed</Condition>
	</Control>
	<Control Id="OptionalCheckBox" Type="CheckBox" X="135" Y="190" Width="220" Height="40" Hidden="yes" Property="WIXUI_EXITDIALOGOPTIONALCHECKBOX" CheckBoxValue="1" Text="[WIXUI_EXITDIALOGOPTIONALCHECKBOXTEXT]">
	  <Condition Action="show">WIXUI_EXITDIALOGOPTIONALCHECKBOXTEXT AND NOT Installed</Condition>
	</Control>
      </Dialog>

      <InstallUISequence>
	<Show Dialog="ExitDialogK" OnExit="success" Overridable="yes" />
      </InstallUISequence>

      <AdminUISequence>
	<Show Dialog="ExitDialogK" OnExit="success" Overridable="yes" />
      </AdminUISequence>
    </UI>
    -->


    <UI>
      <TextStyle Id="WixUI_Font_Normal" FaceName="Tahoma" Size="8" />
      <TextStyle Id="WixUI_Font_Bigger" FaceName="Tahoma" Size="12" />
      <TextStyle Id="WixUI_Font_Title" FaceName="Tahoma" Size="9" Bold="yes" />

      <Property Id="DefaultUIFont" Value="WixUI_Font_Normal" />

      <DialogRef Id="ErrorDlg" />
      <DialogRef Id="FatalError" />
      <DialogRef Id="FilesInUse" />
      <DialogRef Id="MsiRMFilesInUse" />
      <DialogRef Id="PrepareDlg" />
      <DialogRef Id="ProgressDlg" />
      <DialogRef Id="ResumeDlg" />
      <DialogRef Id="UserExit" />
      <DialogRef Id="WelcomeDlg" />
      <DialogRef Id="WelcomeEulaDlg" />

      <Publish Dialog="ExitDialog" Control="Finish" Event="EndDialog" Value="Return" Order="999">1</Publish>

      <Publish Dialog="VerifyReadyDlg" Control="Back" Event="NewDialog" Value="MaintenanceTypeDlg">1</Publish>

      <Publish Dialog="MaintenanceWelcomeDlg" Control="Next" Event="NewDialog" Value="MaintenanceTypeDlg">1</Publish>

      <Publish Dialog="MaintenanceTypeDlg" Control="RepairButton" Event="NewDialog" Value="VerifyReadyDlg">1</Publish>
      <Publish Dialog="MaintenanceTypeDlg" Control="RemoveButton" Event="NewDialog" Value="VerifyReadyDlg">1</Publish>
      <Publish Dialog="MaintenanceTypeDlg" Control="Back" Event="NewDialog" Value="MaintenanceWelcomeDlg">1</Publish>

      <Publish Dialog="WelcomeDlg" Control="Next" Event="NewDialog" Value="VerifyReadyDlg">Installed AND PATCH</Publish>
      <Publish Dialog="VerifyReadyDlg" Control="Back" Event="NewDialog" Value="WelcomeDlg" Order="2">Installed AND PATCH</Publish>

      <InstallUISequence>
	<Show Dialog="WelcomeDlg" Before="WelcomeEulaDlg">Installed AND PATCH</Show>
	<Show Dialog="WelcomeEulaDlg" Before="ProgressDlg">NOT Installed</Show>
      </InstallUISequence>

      <Property Id="ARPNOMODIFY" Value="1" />

      <UIRef Id="WixUI_Common" />
    </UI>


  </Product>
</Wix>
`)

func internalAssetsMainWxsBytes() ([]byte, error) {
	return _internalAssetsMainWxs, nil
}

func internalAssetsMainWxs() (*asset, error) {
	bytes, err := internalAssetsMainWxsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/assets/main.wxs", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/assets/init.sh": internalAssetsInitSh,
	"internal/assets/main.wxs": internalAssetsMainWxs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"init.sh": &bintree{internalAssetsInitSh, map[string]*bintree{}},
			"main.wxs": &bintree{internalAssetsMainWxs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

