// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	crypto "crypto"

	tpm "github.com/kolide/krypto/pkg/tpm"
	mock "github.com/stretchr/testify/mock"
)

// TpmSignerCreator is an autogenerated mock type for the tpmSignerCreator type
type TpmSignerCreator struct {
	mock.Mock
}

// CreateKey provides a mock function with given fields: opts
func (_m *TpmSignerCreator) CreateKey(opts ...tpm.TpmSignerOption) ([]byte, []byte, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateKey")
	}

	var r0 []byte
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(...tpm.TpmSignerOption) ([]byte, []byte, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...tpm.TpmSignerOption) []byte); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(...tpm.TpmSignerOption) []byte); ok {
		r1 = rf(opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(...tpm.TpmSignerOption) error); ok {
		r2 = rf(opts...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// New provides a mock function with given fields: private, public
func (_m *TpmSignerCreator) New(private []byte, public []byte) (crypto.Signer, error) {
	ret := _m.Called(private, public)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 crypto.Signer
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) (crypto.Signer, error)); ok {
		return rf(private, public)
	}
	if rf, ok := ret.Get(0).(func([]byte, []byte) crypto.Signer); ok {
		r0 = rf(private, public)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Signer)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(private, public)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTpmSignerCreator creates a new instance of TpmSignerCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTpmSignerCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *TpmSignerCreator {
	mock := &TpmSignerCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
