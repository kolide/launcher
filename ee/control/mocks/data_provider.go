// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// DataProvider is an autogenerated mock type for the dataProvider type
type DataProvider struct {
	mock.Mock
}

// GetConfig provides a mock function with given fields:
func (_m *DataProvider) GetConfig() (io.Reader, error) {
	ret := _m.Called()

	var r0 io.Reader
	var r1 error
	if rf, ok := ret.Get(0).(func() (io.Reader, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() io.Reader); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubsystemData provides a mock function with given fields: hash
func (_m *DataProvider) GetSubsystemData(hash string) (io.Reader, error) {
	ret := _m.Called(hash)

	var r0 io.Reader
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (io.Reader, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(string) io.Reader); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDataProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataProvider creates a new instance of DataProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataProvider(t mockConstructorTestingTNewDataProvider) *DataProvider {
	mock := &DataProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
