// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	trace "go.opentelemetry.io/otel/sdk/trace"
)

// SpanProcessor is an autogenerated mock type for the SpanProcessor type
type SpanProcessor struct {
	mock.Mock
}

// ForceFlush provides a mock function with given fields: ctx
func (_m *SpanProcessor) ForceFlush(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnEnd provides a mock function with given fields: s
func (_m *SpanProcessor) OnEnd(s trace.ReadOnlySpan) {
	_m.Called(s)
}

// OnStart provides a mock function with given fields: parent, s
func (_m *SpanProcessor) OnStart(parent context.Context, s trace.ReadWriteSpan) {
	_m.Called(parent, s)
}

// Shutdown provides a mock function with given fields: ctx
func (_m *SpanProcessor) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSpanProcessor creates a new instance of SpanProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSpanProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *SpanProcessor {
	mock := &SpanProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
